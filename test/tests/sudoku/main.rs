use rust_basic::sudoku::Sudoku;

#[test]
fn new() {
    let sudoku = Sudoku::new();
    for x in 0..Sudoku::GRID_SIZE {
        for y in 0..Sudoku::GRID_SIZE {
            assert_eq!(sudoku[(x, y)], 0);
        }
    }
}

#[test]
fn set() {
    let mut sudoku = Sudoku::new();
    for x in 0..Sudoku::GRID_SIZE {
        for y in 0..Sudoku::GRID_SIZE {
            let new_value = x as u8;
            sudoku.set(x, y, new_value);
            assert_eq!(sudoku[(x, y)], new_value);
        }
    }
}

#[test]
#[should_panic(expected = "expect: valid index")]
fn set_panic_x() {
    let mut sudoku = Sudoku::new();
    sudoku.set(9, 0, 1);
}

#[test]
#[should_panic(expected = "expect: valid index")]
fn set_panic_y() {
    let mut sudoku = Sudoku::new();
    sudoku.set(0, 9, 1);
}

#[test]
#[should_panic(expected = "expect: valid value")]
fn set_panic_value() {
    let mut s = Sudoku::new();
    s.set(0, 0, 10);
}

#[test]
fn from() {
    let array = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9],
    ];
    let sudoku = Sudoku::from(array);
    for x in 0..9 {
        for y in 0..9 {
            let value = sudoku[(x, y)];
            assert_eq!(value, array[y][x]);
        }
    }
}

#[test]
#[should_panic(expected = "expect: valid value")]
fn from_panic() {
    let _ = Sudoku::from([
        [10, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9],
    ]);
}

#[test]
fn equal_true() {
    let array = [
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ];
    let sudoku0 = Sudoku::from(array);
    let sudoku1 = Sudoku::from(array);
    assert_eq!(sudoku0, sudoku1);
}

#[test]
fn equal_false() {
    let sudoku0 = Sudoku::from([
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ]);
    let sudoku1 = Sudoku::from([
        [5, 3, 4, 6, 0, 8, 9, 1, 2],
        [6, 7, 2, 1, 0, 5, 3, 4, 8],
        [1, 9, 8, 3, 0, 2, 5, 6, 7],
        [8, 5, 9, 7, 0, 1, 4, 2, 3],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 1, 3, 9, 0, 4, 8, 5, 6],
        [9, 6, 1, 5, 0, 7, 2, 8, 4],
        [2, 8, 7, 4, 0, 9, 6, 3, 5],
        [3, 4, 5, 2, 0, 6, 1, 7, 9],
    ]);
    assert_ne!(sudoku0, sudoku1);
}

#[test]
fn valid_true() {
    let sudoku = Sudoku::from([
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ]);
    assert_eq!(sudoku.validate(), true);
}

#[test]
fn valid_false_row() {
    let sudoku = Sudoku::from([
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 7, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ]);
    assert_eq!(sudoku.validate(), false);
}

#[test]
fn valid_false_column() {
    let sudoku = Sudoku::from([
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [5, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 7, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ]);
    assert_eq!(sudoku.validate(), false);
}

#[test]
fn valid_false_block() {
    let sudoku = Sudoku::from([
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [5, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 7, 8, 3, 1, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ]);
    assert_eq!(sudoku.validate(), false);
}

#[test]
fn solve() {
    let mut sudoku = Sudoku::from([
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9],
    ]);
    assert_eq!(sudoku.solve(), true);
    let expected = Sudoku::from([
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ]);
    assert_eq!(sudoku, expected);
}

#[test]
fn solve_false() {
    let mut sudoku = Sudoku::from([
        [1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]);
    assert_eq!(sudoku.solve(), false);
}

#[test]
fn solve_anti_brute_force() {
    let mut sudoku = Sudoku::from([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 8, 5],
        [0, 0, 1, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 7, 0, 0, 0],
        [0, 0, 4, 0, 0, 0, 1, 0, 0],
        [0, 9, 0, 0, 0, 0, 0, 0, 0],
        [5, 0, 0, 0, 0, 0, 0, 7, 3],
        [0, 0, 2, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 0, 0, 0, 9],
    ]);
    assert_eq!(sudoku.solve(), true);
    let expected = Sudoku::from([
        [9, 8, 7, 6, 5, 4, 3, 2, 1],
        [2, 4, 6, 1, 7, 3, 9, 8, 5],
        [3, 5, 1, 9, 2, 8, 7, 4, 6],
        [1, 2, 8, 5, 3, 7, 6, 9, 4],
        [6, 3, 4, 8, 9, 2, 1, 5, 7],
        [7, 9, 5, 4, 6, 1, 8, 3, 2],
        [5, 1, 9, 2, 8, 6, 4, 7, 3],
        [4, 7, 2, 3, 1, 9, 5, 6, 8],
        [8, 6, 3, 7, 4, 5, 2, 1, 9],
    ]);
    assert_eq!(sudoku, expected);
}

/// The eveil level from [https://sudoku.com/evil].
#[test]
fn solve_evil_level() {
    let mut sudoku = Sudoku::from([
        [0, 0, 0, 0, 0, 1, 0, 7, 2],
        [3, 2, 0, 0, 7, 0, 0, 0, 4],
        [6, 0, 0, 0, 0, 0, 0, 0, 0],
        [7, 4, 0, 0, 1, 0, 0, 0, 3],
        [0, 0, 8, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 0, 9, 0, 0],
        [0, 0, 6, 0, 2, 0, 0, 0, 0],
        [2, 8, 0, 0, 0, 9, 3, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 8],
    ]);
    assert_eq!(sudoku.solve(), true);
    let expected = Sudoku::from([
        [8, 5, 4, 3, 9, 1, 6, 7, 2],
        [3, 2, 9, 6, 7, 5, 1, 8, 4],
        [6, 1, 7, 8, 4, 2, 5, 3, 9],
        [7, 4, 2, 9, 1, 6, 8, 5, 3],
        [5, 9, 8, 2, 3, 7, 4, 1, 6],
        [1, 6, 3, 5, 8, 4, 9, 2, 7],
        [4, 3, 6, 1, 2, 8, 7, 9, 5],
        [2, 8, 5, 7, 6, 9, 3, 4, 1],
        [9, 7, 1, 4, 5, 3, 2, 6, 8],
    ]);
    assert_eq!(sudoku, expected);
}

/// A game from [https://www.sudokuwiki.org].
#[test]
fn solve_sudoku_wiki() {
    let mut sudoku = Sudoku::from([
        [7, 0, 0, 0, 2, 0, 0, 0, 0],
        [0, 5, 0, 0, 0, 6, 0, 3, 0],
        [0, 0, 9, 0, 0, 0, 0, 0, 4],
        [0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 8, 0, 0, 0, 5, 0],
        [0, 0, 4, 0, 9, 0, 0, 0, 2],
        [0, 0, 1, 0, 7, 0, 9, 0, 0],
        [0, 0, 0, 5, 0, 0, 0, 8, 0],
        [0, 3, 0, 0, 0, 4, 0, 0, 6],
    ]);
    assert_eq!(sudoku.solve(), true);
    let expected = Sudoku::from([
        [7, 4, 6, 9, 2, 3, 8, 1, 5],
        [1, 5, 2, 4, 8, 6, 7, 3, 9],
        [3, 8, 9, 1, 5, 7, 6, 2, 4],
        [6, 7, 5, 3, 4, 2, 1, 9, 8],
        [2, 9, 3, 8, 6, 1, 4, 5, 7],
        [8, 1, 4, 7, 9, 5, 3, 6, 2],
        [5, 2, 1, 6, 7, 8, 9, 4, 3],
        [4, 6, 7, 5, 3, 9, 2, 8, 1],
        [9, 3, 8, 2, 1, 4, 5, 7, 6],
    ]);
    assert_eq!(sudoku, expected);
}

#[test]
fn reset() {
    let array = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9],
    ];
    let mut sudoku = Sudoku::from(array);
    sudoku.solve();
    assert_ne!(sudoku, Sudoku::from(array));
    sudoku.reset();
    assert_eq!(sudoku, Sudoku::from(array));
}
